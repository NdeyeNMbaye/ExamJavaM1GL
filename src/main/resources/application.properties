# Nom de l'application
spring.application.name=thymeleaf1

# Port de l'application
server.port=8088

# --- Configuration de la source de données pour PostgreSQL ---
# URL de la base de données PostgreSQL.
# IMPORTANT : Remplacez 'nom_de_votre_base' par le nom de votre base de données réelle.
# Remplacez 'votre_nom_utilisateur' et 'votre_mot_de_passe' par vos identifiants.
spring.datasource.url=jdbc:postgresql://localhost:5432/BaseExamJava
spring.datasource.username=postgres
spring.datasource.password=passer
spring.datasource.driver-class-name=org.postgresql.Driver

# --- Configuration JPA (Hibernate) ---
# Active la fonctionnalité pour qu'Hibernate mette à jour le schéma de la base de données
# automatiquement en fonction de vos entités. C'est idéal pour le développement.
# Valeurs possibles : 'update', 'create', 'create-drop', 'none'.
spring.jpa.hibernate.ddl-auto=update

# Indique à Hibernate quel dialecte de SQL utiliser pour PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# --- Options de débogage ---
# Affiche toutes les requêtes SQL générées par l'application dans la console.
spring.jpa.show-sql=true

# Formate le SQL affiché pour une meilleure lisibilité.
spring.jpa.properties.hibernate.format_sql=true

# Définit le niveau de log pour Hibernate pour afficher les requêtes SQL et leurs paramètres.
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# --- Configuration H2 (commentée, car nous utilisons PostgreSQL) ---
# spring.datasource.url=${DB_URL:jdbc:h2:mem:security-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
# spring.datasource.driverClassName=${DB_DRIVER:org.h2.Driver}
# spring.datasource.username=${DB_USER:user}
# spring.datasource.password=${DB_PASSWORD:passer@123}
# spring.h2.console.enabled=true
